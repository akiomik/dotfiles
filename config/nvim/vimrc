" general settings
se nu
se sw=2
se ts=2
se sc
se si
se hls
se is
se title
se et
se nf-=octal
se ruler
se sm
se bs=2
se cul
se sta
se fdm=marker
se nowrap
se bsk=/tmp/*,/private/tmp/*
se clipboard=unnamed
se ml
se mls=5
" se ambiwidth=double " hyper上ではsingleのままのほうが問題が少ない

if !has("nvim")
  se vi+=n~/.vim/viminfo
endif

" my autocmds
" {{{ my autocmds
if has("autocmd")
  " save cursor position
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe "normal g`\"" |
    \ endif
endif
" }}}


" keymaps
" {{{ keymaps
if &diff
  map <Leader>1 :diffget LOCAL<CR>
  map <Leader>2 :diffget BASE<CR>
  map <Leader>3 :diffget REMOTE<CR>
endif

" reloading file
map <F5> :e!<CR>
" }}}


" plugins
" {{{ plugins
call plug#begin('~/.vim/plugged')

  " misc
  Plug 'Shougo/vimproc.vim', {'do': 'make'}

  " encoding
  "source $VIM/encode.vim


  " syntax & format
  " {{{ syntax & format
  au BufNewFile,BufReadPost *.gradle setl filetype=groovy
  Plug 'derekwyatt/vim-scala', {'for': 'scala'}
  au BufNewFile,BufReadPost *.sbt setl filetype=scala
  Plug 'slim-template/vim-slim', {'for': 'slim'}
  Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}
  Plug 'kchmck/vim-coffee-script', {'for': 'coffee'}
  Plug 'rodjek/vim-puppet', {'for': 'puppet'}
  Plug 'hhvm/vim-hack', {'for': 'php'}
  Plug 'pocke/rbs.vim', {'for': 'rbs'}
  au BufNewFile,BufReadPost Steepfile setl filetype=ruby
  au BufNewFile,BufReadPost Routefile setl filetype=ruby
  au BufNewFile,BufReadPost *.ruby setl filetype=ruby
  au BufNewFile,BufReadPost *.json.jb setl filetype=ruby
  au BufNewFile,BufReadPost *.thor setl filetype=ruby
  Plug 'wting/rust.vim', {'for': 'rust'}
  au BufNewFile,BufReadPost *.hbs setl filetype=handlebars
  Plug 'mustache/vim-mustache-handlebars', {'for': 'handlebars'}
  let g:haskell_conceal = 0
  let g:haskell_folds = 0
  let g:haskell_indent = 0
  let g:haskell_shqq = 0
  let g:haskell_rlangqq = 0
  Plug 'akiomik/vim2hs', {'for': 'haskell'}
  Plug 'isRuslan/vim-es6', {'for': 'javascript'}
  Plug 'leafgarland/typescript-vim', {'for': 'typescript'}
  " au BufNewFile,BufReadPost *.mts setl filetype=typescript
  Plug 'gre/play2vim' " for .scala.html, application.conf, routes
  au BufNewFile,BufReadPost *.scala.template setl filetype=scala
  Plug 'posva/vim-vue', {'for': 'vue'}
  au BufNewFile,BufReadPost *.ipynb setl filetype=json
  au BufNewFile,BufReadPost *.agda setl filetype=agda
  au BufNewFile,BufReadPost *.vader setl filetype=vim
  Plug 'othree/html5.vim' " for vim-svelte
  Plug 'pangloss/vim-javascript' " for vim-svelte
  Plug 'evanleck/vim-svelte', {'branch': 'main', 'for': 'svelte'}
  Plug 'mesonbuild/meson', {'do': 'cp -R data/syntax-highlighting/vim/* .'}
  Plug 'cespare/vim-toml', {'for': 'toml'}
  Plug 'tikhomirov/vim-glsl', {'for': 'glsl'}
  Plug 'hashivim/vim-terraform', {'for': 'terraform'}
  au BufNewFile,BufReadPost *.tftpl setl filetype=json
  Plug 'MaxMEllon/vim-jsx-pretty', { 'for': 'javascriptreact' }
  au BufNewFile,BufReadPost Dockerfile-* setl filetype=Dockerfile
  au BufNewFile,BufReadPost Dockerfile-*.dockerignore setl filetype=conf
  Plug 'mechatroner/rainbow_csv'
  au BufNewFile,BufReadPost *.tsv setl noet
  au BufNewFile,BufReadPost *.tsv setl ts=8
  Plug 'wuelnerdotexe/vim-astro'
  Plug 'gleam-lang/gleam.vim'
  Plug 'elixir-editors/vim-elixir'

  " Plug 'dense-analysis/ale'
  Plug 'akiomik/ale', { 'branch': 'add-support-for-agda' }
  let g:ale_fixers = {
    \ 'javascript': ['eslint'],
    \ 'typescript': ['prettier'],
    \ 'vue': ['eslint'],
    \ 'ruby': ['rubocop'],
    \ 'python': ['black', 'isort'],
    \ 'rust': ['rustfmt'],
  \ }
  let g:ale_linters = {
    \ 'go': ['gofmt'],
    \ 'scala': ['metals'],
    \ 'python': ['flake8', 'mypy'],
    \ 'ruby': ['rubocop'],
    \ 'elixir': ['credo', 'dialyxir', 'dogma', 'elixir-ls', 'mix'],
  \ }
  let g:ale_pattern_options = { '\.sbt$': {'ale_linters': [], 'ale_fixers': []} }
  let g:ale_lint_on_text_changed = 1
  let g:ale_fix_on_save = 1
  let g:ale_ruby_rubocop_options = '-a'

  " Plug 'scrooloose/syntastic'
  let g:syntastic_haskell_checkers = ['hdevtools']
  " set statusline+=%#warningmsg#
  " set statusline+=%{SyntasticStatuslineFlag()}
  " set statusline+=%*
  " let g:syntastic_always_populate_loc_list = 1
  " let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_ignore_files = ['\m\c\.h$', '\m\.sbt$']

  " sub checker for haskell
  " NOTE: ghc-mod is longer supported at syntastic
  Plug 'eagletmt/ghcmod-vim', {'for': 'haskell'}

  " laungage server protocols support
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'scalameta/coc-metals', {'do': 'yarn install --frozen-lockfile', 'for': 'scala'}
  Plug 'neoclide/coc-solargraph', {'for': 'ruby'}
  Plug 'neoclide/coc-tsserver'
  Plug 'elixir-lsp/coc-elixir'
  " }}}

  " coc settings for scala (metals)
  " {{{ metals
  set hidden

  " Some servers have issues with backup files, see #649.
  set nobackup
  set nowritebackup

  " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
  " delays and poor user experience.
  set updatetime=300

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  set signcolumn=yes

  " Use tab for trigger completion with characters ahead and navigate.
  " NOTE: There's always complete item selected by default, you may want to enable
  " no select by `"suggest.noselect": true` in your configuration file.
  " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
  " other plugin before putting this into your config.
  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

  " Make <CR> to accept selected completion item or notify coc.nvim to format
  " <C-g>u breaks current undo, please make your own choice.
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  " Use `[g` and `]g` to navigate diagnostics
  " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call ShowDocumentation()<CR>

  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Formatting selected code.
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Applying codeAction to the selected region.
  " Example: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap keys for applying codeAction to the current buffer.
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Apply AutoFix to problem on the current line.
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Run the Code Lens action on the current line.
  nmap <leader>cl  <Plug>(coc-codelens-action)

  " Map function and class text objects
  " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  " Remap <C-f> and <C-b> for scroll float windows/popups.
  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  " Use CTRL-S for selections ranges.
  " Requires 'textDocument/selectionRange' support of language server.
  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocActionAsync('format')

  " Add `:Fold` command to fold current buffer.
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " Add `:OR` command for organize imports of the current buffer.
  command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

  " Add (Neo)Vim's native statusline support.
  " NOTE: Please see `:h coc-status` for integrations with external plugins that
  " provide custom statusline: lightline.vim, vim-airline.
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Mappings for CoCList
  " Show all diagnostics.
  nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions.
  nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
  " Show commands.
  nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document.
  nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols.
  nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list.
  nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
  " }}}


  " colorscheme
  " {{{ colorscheme
  Plug 'w0ng/vim-hybrid'
  Plug 'cocopon/lightline-hybrid.vim'
  " }}}


  " powerline
  " {{{ powerline
  au BufEnter NERD_tree_* set statusline=%t " disable for nerdtree

  Plug 'itchyny/lightline.vim'
  Plug 'maximbaz/lightline-ale'
  let g:lightline = {
    \ 'colorscheme': 'hybrid',
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['gitbranch', 'readonly', 'filename', 'modified'],
    \     ['ctrlpmark'],
    \   ],
    \   'right': [
    \     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
    \     ['percent', 'lineinfo'],
    \     ['fileformat', 'fileencoding', 'filetype'],
    \   ],
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \   'ctrlpmark': 'CtrlPMark',
    \ },
    \ 'component_expand': {
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ },
    \ 'component_type': {
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \ },
  \ }


  " {{{ CtrlPMark()
  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP' && has_key(g:lightline, 'ctrlp_item')
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([
        \ g:lightline.ctrlp_prev,
        \ g:lightline.ctrlp_item,
        \ g:lightline.ctrlp_next
      \ ], 0)
    else
      return ''
    endif
  endfunction

  let g:ctrlp_status_func = {
    \ 'main': 'CtrlPStatusMain',
    \ 'prog': 'CtrlPStatusProg',
    \ }

  function! CtrlPStatusMain(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusProg(str)
    return lightline#statusline(0)
  endfunction
  " }}}

  se ls=2
  se nosmd
  " }}}


  " filer
  " {{{ filer
  Plug 'scrooloose/nerdtree'
  Plug 'jistr/vim-nerdtree-tabs'
  if !has('gui_running')
    let g:nerdtree_tabs_open_on_console_startup=1
  end
  " close nerdtree automatically
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
  " Plug 'cocopon/vaffle.vim'
  " Plug 'justinmk/vim-dirvish'
  " function! s:open_vaffle()
  "   vertical 30 new
  "   silent! exe 'Vaffle'
  "   wincmd l
  "   wincmd h
  "   wincmd l
  " endfunction
  " augroup OpenVaffle
  "   au!
  "   autocmd VimEnter * call s:open_vaffle()
  " augroup END

  Plug 'ctrlpvim/ctrlp.vim'
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip
  set wildignore+=*/dist/*,*/node_modules/*,*/target/*
  " }}}


  " tab
  " {{{ tab
  set showtabline=2 " 常にタブラインを表示

  " デフォルトのtはfで代替可能
  nnoremap [Tag] <Nop>
  nmap t [Tag]

  " t1 ~ t9で移動
  for n in range(1, 9)
    execute 'nnoremap <silent> [Tag]'.n ':<C-u>tabnext'.n.'<CR>'
  endfor

  " tc, tx, tn, tp
  map <silent> [Tag]c :tablast <bar> tabnew<CR>
  map <silent> [Tag]x :tabclose<CR>
  map <silent> [Tag]n :tabnext<CR>
  map <silent> [Tag]p :tabprevious<CR>
  " }}}


  " formatter
  " {{{ formatter
  " run :SQLUFormatter on vim??
  Plug 'vim-scripts/SQLUtilities'

  Plug 'junegunn/vim-easy-align'
  " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
  vmap <Enter> <Plug>(EasyAlign)
  " Start interactive EasyAlign for a motion/text object (e.g. gaip)
  nmap ga <Plug>(EasyAlign)

  Plug 'tomtom/tcomment_vim'
  " }}}


  " vimshell
  " {{{ vimshell
  Plug 'Shougo/vimshell'
  command! Scala :VimShellInteractive scala
  command! Sbt :VimShellInteractive sbt
  " }}}


  " indent
  " {{{ indent
  Plug 'nathanaelkane/vim-indent-guides'
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_guide_size=0
  let g:indent_guides_auto_colors=0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=235
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=234
  Plug 'kana/vim-filetype-haskell', {'for': 'haskell'}
  " }}}


  " tagbar
  " {{{ tagbar
  Plug 'majutsushi/tagbar'
  nmap <F8> :TagbarToggle<CR>
  if executable('coffeetags')
    let g:tagbar_type_coffee = {
      \ 'ctagsbin' : 'coffeetags',
      \ 'ctagsargs' : '',
      \ 'kinds' : [
      \ 'f:functions',
      \ 'o:object',
      \ ],
      \ 'sro' : ".",
      \ 'kind2scope' : {
      \ 'f' : 'object',
      \ 'o' : 'object',
      \ }
    \ }
  endif
  " }}}


  " text objects
  " {{{
  Plug 'tpope/vim-surround'
  " }}}


  " motions
  " {{{ motions
  Plug 'Lokaltog/vim-easymotion'
  Plug 'kana/vim-smartword'
  " }}}


  " multiple cursor
  Plug 'terryma/vim-multiple-cursors'
  function! Multiple_cursors_before()
    if exists(':ALEDisable')==2
      exe 'ALEDisable'
    endif
  endfunction

  function! Multiple_cursors_after()
    if exists(':ALEEnable')==2
      exe 'ALEEnable'
    endif
  endfunction


  " %s highlight
  Plug 'osyo-manga/vim-over'
  map <C-s> :OverCommandLine<CR>


  " git
  " {{{ git
  Plug 'akiomik/git-gutter-vim'
  Plug 'tpope/vim-fugitive' " for lightline
  " }}}


  " EditorConfig
  Plug 'editorconfig/editorconfig-vim'


call plug#end()
" }}}


" colorscheme
" {{{ colorscheme
se t_Co=256
se bg=dark
let g:hybrid_custom_term_colors = 1
" let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
colorscheme hybrid
" }}}


" completion
exe "set rtp+=".globpath($GOPATH, "src/github.com/nsf/gocode/vim")
